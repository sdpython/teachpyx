2024-11-31 : rappel feuille de route 2024
=========================================

Le plan des séances est changé après que celles-ci ont eu lieu.

Séance 1
++++++++

:ref:`Prises aux dames <nbl-practice-py-base-dame_prise>`

Séance 2
++++++++

Tests unitaires et classes toujours avec les dames

:ref:`Prises aux dames <nbl-practice-py-base-dame_prise>`

Séance 3
++++++++

:ref:`classes pour représenter un graphe <nbl-practice-py-base-classe_tree>`

Fin des classes puis :ref:`les itérateurs <nbl-practice-py-base-classe_iterateur>` et
:ref:`numpy broadcast <nbl-c_data-numpy_broadcast>`.

Séance 4
++++++++

Nous garderons les dames et l'algortithme minimax pour une autre fois peut être.
Cette séance à propos de la programmation dynamique.
Le premier exercice consiste à déterminer le nombre minimal de pièces
de monnaie pour écrire un montant et de retrouver la séquence minimale
de pièces. On considère les pièces ``[1, 2, 4, 5]``.

.. runpython::
  :showcode:

  def ecriture_minimale(n):
      pieces = [1, 2, 4, 5]
      min_pieces = [None for i in range(n+1)]
      predecessor = [None for i in range(n+1)]
      min_pieces[0] = 1
      for p in pieces:
          min_pieces[p] = 1
          predecessor[p] = p
      for i in range(n+1):
          if min_pieces[i] is None:
              # écriture impossible
              continue
          for p in pieces:
              if i + p > n:
                  break
              m = min_pieces[i] + 1
              if min_pieces[i + p] is None or m < min_pieces[i + p]:
                  min_pieces[i + p] = m
                  predecessor[i + p] = p
      composition = []
      while n > 0:
          composition.append(predecessor[n])
          n -= predecessor[n]
      return min_pieces[n], composition

  print(ecriture_minimale(99))

On bascule ensuite vers la
:ref:`Distance d'édition <nbl-practice-years-2023-editdist>`.

A propos de la distance d'édition, voir aussi
:ref:`Distance d'édition <nbl-practice-algo-base-exercice_edit_distance>` ou encore
:ref:`Distance entre deux mots de même longueur et tests unitaires <nbl-practice-algo-base-exercice_editdist>`.

Séance 5
++++++++

* :ref:`burrowswheelerrst`
* :ref:`Code de Vigenère <nbl-practice-algo-compose-vigenere>`

Séance 6
++++++++

* :ref:`Tracer une pyramide bigarrée <nbl-practice-tds-base-pyramide_bigarree>`
* :ref:`Expressions régulières <nbl-practice-py-base-exercice_regex>`,
  :ref:`Modules, fichiers, expression régulières <nbl-practice-tds-base-module_file_regex>`
* :ref:`Le voyageur de commerce <nbl-practice-algo-base-tsp_simplifie>` ou
  `problème du sac à dos <https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_sac_%C3%A0_dos>`_

Evocation de la :ref:`Recherche à base de préfixes <nbl-practice-years-2023-prefix_search>`
en terme algorithmique.

Autres variations autour du problème du voyageur de commerce,
ou TSP pour Travelling Salesman Problem
ou encore circuit hamiltonien: :ref:`l-tsp_kohonen`, :ref:`l-tsp_kruskal`.
Quelques bouts de code écrit durant la séance.
Tout d'abord les expressions régulières.

.. runpython::
    :showcode:

    import re

    reg = re.compile("(-?[1-9][ 0-9]{0,16}([.,][0-9]{0,4})? *(€|(euros))?)")
    text = "Le montant de 3000 euros auquel on a ôté 5,4 euros."
    print(reg.findall(text))
    
    reg = re.compile("([0-9]{1,2}[-/][0-9]{1,2}[-/][0-9]{2,4})")
    text = "9/10/2024 09-10-24"
    print(reg.findall(text))

Ensuite la pyramide.

.. runpython::
    :rst:
    :showcode:

    import math
    import os
    import matplotlib.pyplot as plt

    fig, ax = plt.subplots(1, 1)
    x, y, colors = [], [], []
    cs = ["r", "b", "g"]
    for i in range(0, 5):
        for j in range(0, 5):
            x.append(i - j * 0.5)
            y.append(j * math.sqrt(3) / 2)
            colors.append(cs[(2*i -j) % 3])
    size = [2000 for c in x]
    ax.scatter(x, y, s=size, c=colors, alpha=0.5)
    fig.savefig(os.path.join(__WD__, "pyramide.png"))

    text = ".. image:: pyramide.png"
    print(text)

Ensuite le voyageur de commerce.

.. runpython::
    :rst:
    :showcode:

    import itertools
    import numpy as np
    import matplotlib.pyplot as plt

    def show(villes):
        fig, ax = plt.subplots(1, 1)
        x = villes[:, 0].tolist() + [villes[0, 0]]
        y = villes[:, 1].tolist() + [villes[0, 1]]
        ax.plot(x, y, "o-")
        ax.set_title(f"longueur {distance(villes)}")
        return fig, ax
        
    def distance(villes):
        # distance sans boucle
        dall = villes[1:, :] - villes[:-1, :]
        d = (dall[:, 0] ** 2 + dall[:, 1] ** 2) ** 0.5
        dlast = villes[0, :] - villes[-1, :]
        d1 = (dlast[0] ** 2 + dlast[1] ** 2) ** 0.5
        return d.sum() + d1
        
    def solution_permutations(villes):
        bestp = list(range(villes.shape[0]))
        bestd = distance(villes)
        for p in itertools.permutations(list(range(villes.shape[0]))):
            v2 = villes[list(p), :]
            d2 = distance(v2)
            if d2 < bestd:
                bestd = d2
                bestp = list(p)
        return villes[bestp, :]

    def solution_croisement(villes):
        bestd = distance(villes)
        bestv = villes
        for i in range(0, villes.shape[0]):
            for j in range(i+2, villes.shape[0]):
                p = list(range(villes.shape[0]))
                if i > 0:
                    p[i:j] = p[j-1:i-1:-1]
                else:
                    p[i:j] = p[j-1::-1]
                v2 = bestv[p, :]
                d2 = distance(v2)
                if d2 < bestd:
                    bestd = d2
                    bestv = v2
        return bestv

    villes = np.random.rand(8, 2)
    print("distance initiale", distance(villes))

    # solution naive
    print("-- optimisation gourmande...")
    optim = solution_permutations(villes)
    print("-- optimisation gourmande:", distance(optim))

    print("-- optimisation plus rapide mais approchée...")
    optim = solution_croisement(villes)
    print("-- optimisation plus rapide mais approchée", distance(optim))

    # graph
    fig, ax = show(optim)
    fig.savefig(os.path.join(__WD__, "tsp_simple.png"))

    text = ".. image:: tsp_simple.png"
    print(text)

Séance 7
++++++++

* :ref:`Classe et héritage <nbl-practice-py-base-classe_user_p>`

Convertir une expression mathématique comme :math:`((34 + 6) - 2) / (7 - 4)`
en `notation polonaise inverse <https://fr.wikipedia.org/wiki/Notation_polonaise_inverse>`_.
Voir aussi `Algorithme Shunting-yard
<https://fr.wikipedia.org/wiki/Algorithme_Shunting-yard>`_.

Séance 8
++++++++

* :ref:`Optimisation de la note moyenne <nbl-practice-years-2023-bareme_note_optimisation>`
* :ref:`Pivot de Gauss <nbl-practice-years-2023-pivot_gauss>`,
  cet algorithme est la première étage pour inverser une matrice

TD noté 1h30 en seconde partie.
Classes et un algorithme.
Enoncés des années précédentes :
:ref:`l-exams`.
