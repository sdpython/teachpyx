.. _l-feuille-route-2024:

==================================
2024-03-01 : feuille de route 2024
==================================

Séance 1 (26/1)
===============

* site web : `sdpython.github.io <https://sdpython.github.io/>`_
* :ref:`l-ml-rappel`
* programmation (python :epkg:`numpy`, :epkg:`pandas`, :epkg:`matplotlib`, :epkg:`jupyter`)
* :ref:`Tests unitaires <nbl-practice-py-base-tests_unitaires>`, package python
* `SQL <https://en.wikipedia.org/wiki/SQL>`_
* `CPU <https://en.wikipedia.org/wiki/Central_processing_unit>`_,
  `CUDA <https://en.wikipedia.org/wiki/CUDA>`_
* machine learning, :epkg:`scikit-learn`, :epkg:`pytorch`
* `comparaison torch/scikit-learn <https://sdpython.github.io/doc/experimental-experiment/dev/auto_examples/plot_torch_linreg.html>`_
* :ref:`l-regclass`
* évaluation, :ref:`ROC <l-ml-plot-roc>`, :math:`R^2`
* ranking, clustering
* `ChatGPT <https://chat.openai.com/>`_,
  `LLM <https://en.wikipedia.org/wiki/Large_language_model>`_,
  (Large Language Model), SLLM (Small LLM)

Séance 2 (2/2)
==============

* arbre de régression, arbre de classification
* random forest, boosting trees
  (:epkg:`xgboost`, :epkg:`lightgtbm`, :epkg:`catboost`),
  :ref:`RandomForest, Overfitting <nbl-practice-ml-ml_a_tree_overfitting>`
* Gradient Boosting, :ref:`Gradient Boosting et Learning Rate avec les Random Forest <nbl-practice-ml-gradient_boosting>`
* Régression Linéaire et contraintes sur les coefficients,
  `Ridge <https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html>`_,
  `Lasso <https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html>`_,
  `ElasticNet <https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html>`_,
  :ref:`Ridge, Lasso, mathématiques <nbl-practice-ml-ridge_lasso>`
* Notion de `Pipeline <https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html>`_
  ou comment intégrer les prétraitements dans le modèle
* prétraitements : tout convertir en numérique,
  données numériques, catégorielles, textuelles
* un jeu de données :
  `load_diabetes <https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_diabetes.html>`_

Séance 3 (8/2)
==============

* Notion de `Pipeline <https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html>`_
  ou comment intégrer les prétraitements dans le modèle
* prétraitements : tout convertir en numérique,
  données numériques, catégorielles, textuelles
* créer son propre estimateur
* cartes avec `geopandas <https://geopandas.org/en/stable/>`_

Séance 4 (16/2)
===============

* recommandations
  `NMF <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.NMF.html>`_
* ranking
* traitement des valeurs manquantes
* `TSNE <https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html>`_
* valeurs manquantes
* pytorch
* `skorch <https://github.com/skorch-dev/skorch>`_
* `statsmodels <https://www.statsmodels.org/stable/index.html>`_

Séance 5 (23/2)
===============

* machine learning éthique,
  `Latanya Sweeney: How technology impacts humans and dictates our civic future
  <https://www.youtube.com/watch?v=Buf0wLb86Lo>`_,
  `Equality of Opportunity in Supervised Learning
  <https://home.ttic.edu/~nati/Publications/HardtPriceSrebro2016.pdf>`_
* interprétabilité,
  `"Why Should I Trust You?"" Explaining the Predictions of Any Classifier
  <https://arxiv.org/pdf/1602.04938v1.pdf>`_,
  `LIME <https://ema.drwhy.ai/LIME.html>`_,
  `SHAP <https://ema.drwhy.ai/shapley.html>`_
  `Partial Dependence Plot
  <https://scikit-learn.org/stable/modules/partial_dependence.html>`_
* séries temporelles,
  décomposition, `Holt Winters <https://otexts.com/fpp2/holt-winters.html>`_,
  détection des changements de régime,
  `Filtre de Kalman <http://www.cs.unc.edu/~welch/media/pdf/kalman_intro.pdf>`_,
  `SSA <https://en.wikipedia.org/wiki/Singular_spectrum_analysis>`_
* analyse de survie
* anomalies
* packages  `prophet <https://facebook.github.io/prophet/docs/quick_start.html>`_,
  `statsmodels <https://www.statsmodels.org/stable/index.html>`_,
  `ruptures <https://github.com/deepcharles/ruptures>`_,
  `tslearn <https://github.com/tslearn-team/tslearn>`_,

Projets
=======

* Un oral de 20 minutes le 5 avril,
  10 minutes de présentation, 10 minutes de questions
* Rendre son code le 2 avril avant minuit
* Par groupe de 3
* Contraintes : un pipeline, un test unitaire, un graphe
