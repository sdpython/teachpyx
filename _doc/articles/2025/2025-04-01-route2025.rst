.. _l-feuille-route-2025-2:

==========================================
2025-04-01 : feuille de route 2025 - avril
==========================================

site web : `sdpython.github.io <https://sdpython.github.io/>`_

`Apprendre la programmation avec Python
<https://sdpython.github.io/doc/teachpyx/dev/>`_

Journée 1 (11/2)
================

L'objectif de cette première journée sera de comprendre la syntaxe
du langage python pour construire un programme
cachant certaines partie d'un document PDF avec un rectangle noir.
D'autres sujets abordés :

* Environnement de travail : Windows, Linux, VSCode, notebook, 
  installation de packages
* Boucles, tests, fonctions, classes, list, tuple, dict
* notion d'algorithmes, tri, recherche dichotomique,
  plus court chemin dans un graphe, problème du voyageur de commerce
* Son assistant en local : :ref:`l-2025-01-31-local-llm`
* Ce que savent les modèles LLMs
* :ref:`l-precis-python`
* package, :epkg:`pypi`
* `Le Chat <https://chat.mistral.ai/>`_,
  `ChatGPT <https://openai.com/index/chatgpt/>`_,
  `Copilot <https://copilot.microsoft.com/chats/>`_,
  `Gemini <https://gemini.google.com/app>`_,
  ...

**Exercices de solfège**

* que vaut ``1/2`` ? et ``1//2`` ?
* retourner une liste (obtenir une liste dans l'autre sens)
* calculer le nombre d'occurences des éléments d'une liste (histogrammes)
* modifier un élément d'un tuple
* retourner un dictionnaire : que fait-on des doublons ?
* trouver le minimum dans un tableau
* trier un tableau
* transformer une liste en un dictionnaire et réciproquement
* comment multiplier une chaîne de caractère ?
* écrire une boucle ``for`` et la même avec une boucle ``while``
* écrire un test
* écrire une fonction qui vérifie si une chaîne de caractères est symétrique
* écrire une fonction qui retourne une chaîne de caractères sans ses voyelles

*fonctions*

* fonction, paramètre par défaut
* arguments positionnels, arguments nommés
* écrire une fonction récursive
* écrire une fonction qui calcule la suite de Fibonacci ?
* écriture ``*args``, ``**kwargs`` ?
* comment espionner une autre fonction ?

*graphes*

* comment représenter un graphe de type facebook à l'aide dictionnaires ?
* compter le nombre d'amis en commun ?
* compter le nombre moyen de connexions ?
* comment obtenir la liste des membres du graphes ?

**Exercices plus longs**

* :ref:`Variables, boucles, tests <nbl-practice-tds-base-variable_boucle_tests>`
* :ref:`Structures de données <nbl-practice-py-base-structures_donnees_conversion>`
* :ref:`Tracer une pyramide bigarrée <nbl-practice-tds-base-pyramide_bigarree>`
* :ref:`Recherche dichotomique <nbl-practice-py-base-recherche_dichotomique>`
* :ref:`Tri plus rapide que prévu <nbl-practice-py-base-tri_nlnd>`
* :ref:`l-exp-mathador`
* :ref:`Un bref aperçu des classes <nbl-practice-py-base-classes_metro>`
* :ref:`Prises aux dames <nbl-practice-py-base-dame_prise>`
* :ref:`les itérateurs <nbl-practice-py-base-classe_iterateur>`
* :ref:`Quelques programmes truffés d'erreurs <nbl-practice-exams-interro_rapide_20_minutes_2014_11>`

**Exercices plus costauds**

* `Lettres et encodages <https://sdpython.github.io/doc/teachpyx/dev/_downloads/032ccfaa7b99eb2a4b992aaa3bc48c34/td_note_2023-2024.pdf>`_
* `Câblages électriques <https://sdpython.github.io/doc/teachpyx/dev/_downloads/8b77610717572d8d8899c825964056bb/td_note_2024.pdf>`_
* `Dessin d'un arbre <https://sdpython.github.io/doc/teachpyx/dev/_downloads/538fb74f2b1a76ede9cb20e40bb4b8af/td_note_2022_rattrapage2.pdf>`_
  (`correction <https://sdpython.github.io/doc/teachpyx/dev/practice/exams/td_note_2022_rattrapage2.html>`_)

**PDF**

.. code-block:: python

    from pypdf import PdfReader, PdfWriter
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import letter

    # ...

Journée 2 (12/2)
================

L'objectif de cette seconde journée sera de manipuler des données
avec :epkg:`pandas`, :epkg:`numpy` pour construire une feuille
Excel avec un graphe automatiquement depuis Python.

* :epkg:`numpy`
* :epkg:`pandas`
* :epkg:`matplotlib`
* :epkg:`seaborn`
* :epkg:`statsmodels`

**Exercices numpy**

* :ref:`Calcul matriciel avec numpy <nbl-c_data-nb_numpy>`
* :ref:`numpy broadcast <nbl-c_data-numpy_broadcast>`
* :ref:`Pivot de Gauss <nbl-practice-years-2023-pivot_gauss>`

**Exercices pandas**

* :ref:`l-example-serialization`
* :ref:`l-example-plot-groupby`
* :ref:`Manipulation de données avec pandas <nbl-c_data-nb_pandas>`

Journée 3 (3/3)
===============

**Partie 1**

* retour sur la syntaxe du langage python, boucle, test, fonctions et classes,
* exercice : :ref:`Tracer une pyramide bigarrée <nbl-practice-tds-base-pyramide_bigarree>`
* :ref:`exceptions`
* :ref:`l-regex`, :ref:`Expressions régulières <nbl-practice-py-base-exercice_regex>`
* :mod:`pickle`, fichiers pickle (voir :ref:`chap_serialization`)
* récupération des fichiers préparés pour la formation avec pandas
* utilisation de :epkg:`skrub` pour avoir un premier aperçu ou
  :epkg:`pandas-profiling`, (voir aussi :epkg:`orange3`)
* première jointure

**Partie 2**

* gestion des dates
* rappel pandas: group by, jointure, inner, outer, left, right, pivot
* une fois la base complète obtenue, analyse de nouveau

**Questions sur les données une fois la jointure effectuée**

* As-t-on associé tous les sinistres ?
* Calculer la durée entre la date d'un sinistre et le premier jour couvert par l'assurance.
  Tracer sa distribution. Que remarque-t-on ?
* Peut-on garder tous les sinistres associés ? (il faut regarder la période couverte)
* On calcule le nombre de sinistres par individu, puis on fait la moyenne
  par année. Est-ce que la proportion paraît constante ?
* On fait de même pour différentes catégories de la base ?
* Comment illustrer rapidement cela avec un graphique ?
* Comment faire des statistiques sur une année ?
  Comment faire avec des assurances à cheval sur deux années ?

Journée 4 (4/3)
===============

**Partie 1**

* retour sur les graphes :epkg:`matplotlib`, :epkg:`seaborn`, :epkg:`plotly`, :epkg:`skrub`
* cartographie, :epkg:`cartopy`, :epkg:`folium`
* corrélations, pairplots
* cubes de données avec pandas, passer un indice à droite (colonnes), à gauche (index)
* reprise de quelques traitement de la veille en SQL :func:`pandas.read_sql`, :meth:`pandas.DataFrame.to_sql`
* mêmes opérations avec :epkg:`SQLite`, :mod:`sqlite3`
* gestion des doublons avec :meth:`pandas.DataFrame.duplicated`
* identification des valeurs aberrantes, voir :meth:`pandas.DataFrame.quantile`
* :ref:`Tests unitaires <nbl-practice-py-base-tests_unitaires>`
* On reprend le code écrit jusqu'à présent. On veut écrire une fonction qui
  effectue la jointure et extrait toutes les lignes aberrantes ou manquantes.
* Ecrire un test unitaire qui valide cette fonction.
  Peut-on utiliser les données qu'on manipule depuis
  le début de la séance ?

**Partie 2**

* notion d'itérateur en python
* application à :func:`pandas.read_csv` version itérateur pour manipuler des gros dataframes
* utilisation de sqlite3 (extension sqlite3 vscode)
* découpage d'une base en deux, apprentissage, respecter le temps et les identifiants
* calcul du prix d'un contrat d'assurance pour un an en fonction de
  variables choisies en fonction des données connues
* Obtient-on le même prix sur les deux bases ?
* Ecrire le test unitaire validant la fonction qui calcule le prix.
* Notion de package.

Journée 5 (5/3)
===============

* introduction de :epkg:`scikit-learn`
* valeurs manquantes, remplacement simple (moyenne),
  corrélations (:class:`sklearn.impute.KNNImputer`), prédictions
  (:class:`sklearn.impute.IterativeImputer`),
  (voir `sklearn.impute <https://scikit-learn.org/stable/api/sklearn.impute.html>`_)
* premières impressions
* exemples classique pour traiter, enrichir un jeux de données :
  `skrub tutorial <https://skrub-data.org/stable/auto_examples/00_getting_started.html>`_,
  voir aussi
  `AggJoiner on a credit fraud dataset <https://skrub-data.org/stable/auto_examples/08_join_aggregation.html>`_
* :class:`sklearn.pipeline.Pipeline`, :class:`sklearn.compose.ColumnTransformer`, 
  :class:`sklearn.pipeline.FeatureUnion`
* Dates, Catégories : :epkg:`category_encoders`, :epkg:`skrub`,
  :ref:`Prétraitement des catégories <nbl-practice-ml-pretraitement_cat>`
* Son : :epkg:`librosa`, voir :ref:`Prétraitement du son <nbl-practice-ml-pretraitement_son>`
* Image : :epkg:`scikit-image`, voir :ref:`Prétraitement d'une image <nbl-practice-ml-pretraitement_image>`
* Texte : :ref:`Prétraitement du texte <nbl-practice-ml-pretraitement_texte>`
